1. Distributed Git
	In this chapter, you'll see how to work with Git in a distributed
	environment as a contributor adn an integrator.
2. Distributed Workflows

2.1 Centralized Workflow
	This means that if two developers clone from the hub and both make
	changes, the first developer to push their changes back up can do so with
	no problemsThe second developer must merge in the first one's work vefore
	pushing changes uo,so as not to overwrite the first developer's changes.
2.2 Integration-Manager Workflow
	Because Git allows you to have multiple remote repositories, it's possible
	to have a workflow where each developer has write access to their own
	public repository and read access to everyone else's. This scenario often
	includes a canonical repository that represents the "official" project
	1. The project maintainer pushes to their public repository
	2. A contributor clones that repository and makes changes
	3. The contributor pushes to their own public copy
	4, The contributor sends the maintainer an email asking them to pull
	changes.
	5. The maintainer adds the contributor's repository as a remote and merges
	locally
	6. The maintainer pushes merged changes to the main repository
2.3 Dictator and Lieutenants Workflow
	This is a variant of a multiple-repository workflow.
	It's generally used by huge projects with hundreds of collaborators;
	One famous example is the Linux Kernel.
	1. Regular developers work on their topic branch and rebase their work on
	top of master. The master branch is that of the reference repository to
	which the dictator pushes
	2. Lieutenants merge the developer's topic branches into the their master
	branch.
	3. The dictator merges the lieutenants'master branches into the dictator's
	master branch.
	4. Finally,the dictator pushes that master branch to the reference
	repository so the other developers can rebase on it.
2.4 Workflows Summary
	
3. Contributing to a Project
	Every project is a bit different.
	1. active contributor count
	2. workflow used for the project
	3. commit access
	All these questions can affect how you contribute effectively to a project
	and what workflows are prefered or available to you.

3.1 Commit Gudielines
	1. First. your submissions should not contain any whitespace errors. Git
	provides an easy way to check for this---vefore you commit,run git diff
	--check,which indentifies possible whitespace errors and lists them for
	you.
	2. Next,try to make each commit a logically separate changeset. If you can
	, try to make your changes digestible.
	3. The last thing to keep in mind is the commit message. Getting in the
	habit of creating quality commit messages makes using and collaborating
	with Git a lot easier.
	As a general rule, your messages should 
	start with a single line that's no more that about 50 characters and that
	describes the changeset concisely,
	followed by a blank linem
	followed by a more detailed explanation:
						your motivation for change
						contrast its implementation with previous behavior

3.2 Private Small Team
	You work for a while(generally in a topic branch), and merge that work
	into you master branch when it's ready to be integrated.
	When you want to share that work, you fetch and merge your master from 
	origin/master if it has changed, and finally push to the master branch on
	the server. The general sequence is something like this.
3.3 Private Managed Team
3.4 Forked Public Project
	Contributing to public projecys is a bit different. Because you don't have
	the permissions to directly update branches on the project, you have to
	get the work to the maintainers some other way.

	1. First, you'll probabluy want to clone the main repository,create a
	topic branch for the patch or patch series you're planning to cntribute,
	and do your work there.

	git clone 
	git checkout -b featureA
	git commit -m


	2.When your branch work is finished and you're ready to contribute it back
	to the maintainers, go to the original project page and click the "Fork"
	button, creating your own writable fork of the project.you then need to
	add this repository URL as a new remote of your local repository;
	
	git remote add myfork <url>

	you then need to push your new work to this repository. It's easiest 
	to push thetopic branch you're working on to your forked repository
	,rather thanmerging that work into your master branch and pushing that.
		The reason is that if your work in't accept or is cherry-picked, you
		don't have to rewind your master branch.
	git push -u myfork featureA
	3. Once your work has been pushed to your fork of the repository, you need
	to notify maintainers of the original project that you have work, you'd
	like them to merge. This is often called a pull request, and you typically
	generate such a request either via the website---Github has its own "Pull
	Request" mechanism that we'll go over in GitHub or you can run the git
	request-pull command and email the subsequent output to the project
	maintainer manually.
3.5 Summary 

4. Maintaining a Project
	This can consist of accepting and  applying patches generated via
	format-patch and emailed to you, or integrating changes in remote branches
	for repositories you've added as remotes to your project.

4.1 Working in topic Branches
	When you're thinking of integrating new work, it's generally a good idea
	to try it out in a topic branch.
4.2 Applying Patches from Email
	if you receive a patch over email that you need to integrate into your
	project, you need to apply the patch in your topic branch to evaluate it.
	There are two ways to apply an eamiled patch: with git apply or with git
	am.
4.3 Determing What is Introduced
	It’s often helpful to get a review of all the commits that are in this
	branch but that aren’t in your master branch. You can exclude commits in
	the master branch by adding the --not option before the branch name. This
	does the same thing as the master..contrib format that we used earlier.
	For example, if your contributor sends you two patches and you create a
	branch called contrib and applied those patches there, you can run this:

	$ git log contrib --not master commit
	5b6235bd297351589efc4d73316f0a68d484f118 Author: Scott Chacon
	<schacon@gmail.com> Date:   Fri Oct 24 09:53:59 2008 -0700
	    seeing if this helps the gem
	commit 7482e0d16d04bea79d0dba8988cc78df655f16a0 Author: Scott Chacon
	<schacon@gmail.com> Date:   Mon Oct 22 19:38:36 2008 -0700
	    updated the gemspec to hopefully work better

	To see a full diff of what would happen if you were to merge this topic
	branch with another branch, you may have to use a weird trick to get the
	correct results. 

	$ git diff master
	
	This command gives you a diff, but it may be misleading. If your master
	branch has moved forward since you created the topic branch from it, then
	you’ll get seemingly strange results. This happens because Git directly
	compares the snapshots of the last commit of the topic branch you’re on
	and the snapshot of the last commit on the master branch. For example, if
	you’ve added a line in a file on the master branch, a direct comparison of
	the snapshots will look like the topic branch is going to remove that
	line.
	If master is a direct ancestor of your topic branch, this isn’t a problem;
	but if the two histories have diverged, the diff will look like you’re
	adding all the new stuff in your topic branch and removing everything
	unique to the master branch.
	What you really want to see are the changes added to the topic
	branch — the work you’ll introduce if you merge this branch with master.
	You do that by having Git compare the last commit on your topic branch
	with the first common ancestor it has with the master branch.
	Technically, you can do that by explicitly figuring out the common
	ancestor and then running your diff on it:
	
	$ git merge-base contrib master 
	36c7dba2c95e6bbb78dfa822519ecfec6e1ca649 
	$ git diff 36c7db
	or, more concisely:
	$ git diff $(git merge-base contrib master)
	
	However, neither of those is particularly convenient, so Git provides
	another shorthand for doing the same thing: the triple-dot syntax. In the
	context of the git diff command, you can put three periods after another
	branch to do a diff between the last commit of the branch you’re on and
	its common ancestor with another branch:
	
	$ git diff master...contrib
	
	This command shows you only the work your current topic branch has
	introduced since its common ancestor with master. That is a very useful
	syntax to remember.
4.4 Integrating Contributed Work
	1. Merging Workflows
	2. Large-Merging Workflows
	3. Rebasing and Cherry-Picking Workflows     to keep a mostly linear
	history
		Cherry-Picking is useful if you have a number of commits on a topic
		branch and you want to integrate only one of them, or if you only have
		one commit on a topic branch and you'd prefer to cherry-pick it rather
		that run rebase.
	4. Rerere
		If you're doing lots of merging and rebasing, or you're maintaining a
		long-lived topic branch, Git has a feature called "rerere" that can
		help.
		Rerere stands for "reuse recorded resolution"--it's a way of
		shortcutting manual conflict resolution. When rerere is enabled, Git
		will keep a set of pre- and post-images from successful merges, and if
		it notices that there’s a conflict that looks exactly like one you’ve
		already fixed, it’ll just use the fix from last time, without
		bothering you with it.
		This feature comes in two parts: a configuration setting and a
		command. The configuration setting is rerere.enabled, and it’s handy
		enough to put in your global config:

		$ git config --global rerere.enabled true
		
		Now, whenever you do a merge that resolves conflicts, the resolution
		will be recorded in the cache in case you need it in the future.

		If you need to, you can interact with the rerere cache using the git
		rerere command. When it’s invoked alone, Git checks its database of
		resolutions and tries to find a match with any current merge conflicts
		and resolve them (although this is done automatically ifrerere.enabled
		is set to true). There are also subcommands tosee what will be
		recorded, to erase specific resolution from thecache, and to clear
		the entire cache. We will cover rerere in more detail in Rerere.
4.5 Tagging Your Releases
	When you've decided to cut a release, you'll probably want to assign a tag
	so you can re-create that release at any point going forward.
